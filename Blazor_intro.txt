# Blazor 
With Blazor we can now build interactive web UIs using C# instead of JavaScript. C# code can be executed both on the server and in the client browser.
=> How can we execute c# code in the client browser?
Blazor can run C# code directly in the browser, using WebAssembly. 
It runs in the same security sandbox as JavaScript frameworks like Angular, React, Vue etc. 
Not just C#, in fact, we can run any type of code in the browser using WebAssembly.

WebAssembly is based on open web standards. So it is a native part of all modern browsers including mobile browsers.

Blazor WebAssembly (also called client-side blazor) is still in preview. So, if you try to create a Blazor project using Visual Studio 2019, 
you will only find Blazor Server App template and not Blazor WebAssembly App template.

Execute the following command to install the Blazor WebAssembly App template
dotnet new --install Microsoft.AspNetCore.Blazor.Templates::3.1.0-preview4.19579.2

# ASP.NET Core Blazor Hosting Models
=======================================
With Blazor we have two hosting models, Blazor WebAssembly (Client-side hosting model) and Blazor Server (Server-side hosting model)

1. Blazor WebAssembly
=======================
With this hosting model, the application runs directly in the browser on WebAssembly.
In the client-side model (Blazor WebAssembly), the Blazor app, its dependencies, and the .NET runtime are downloaded to the browser, 
and the app is executed directly on the browser UI thread.

=> Pros of Blazor WebAssembly
1. A Blazor WebAssembly app can run entirely on the client machine. 
So, after the application is downloaded, a connection to the server is not required. 
This means there is no need for your server to be up and running 24X7.

2. Work is offloaded from the server to the client. It is the client resources and capabilities that are being used.

3. We do not need a full-blown ASP.NET Core web server to host the application. 
We just need a server somewhere, that can deliver the application to the client browser. 
This means we can host the application on our own server on the internet somewhere, in the cloud, on Azure as a static website or even on a CDN Content Delivery Network.

=> Cons of Blazor WebAssembly hosting model
1. The very first request usually takes longer as the entire app, it's dependencies and the .NET runtime must be downloaded to the client browser. 
Keep in mind, it's only the first request that takes longer than usual. 
If that same client visits the application later, it usually starts fast because the browser caches the files.

2. Depending on the nature of the application, capable client hardware and software is required. 
From software standpoint, for example, at least a browser with WebAssembly support is required.

2. Blazor Server
====================
1. With this hosting model, the application is executed on the server. Between the client and the server a SignalR connection is established.
When an event occurs on the client such as a button click for example, the information about the event is sent to the server over the SignalR connection. 
The server handles the event and for the generated HTML a diff (difference) is calculated. 
The entire HTML is not sent again to the client, it's only the diff that is sent to the client over the SignalR connection. 
The browser then updates the UI. Since only the diff is applied to update the UI, the application feels faster and more responsive to the user.

=>  Pros of Blazor Server
1. The app loads much faster as the download size is significantly smaller than a Blazor WebAssembly app.
2. Since the app runs on the server, it can take full advantage of server capabilities, including use of any .NET Core compatible APIs.
3. All the client needs, to use the app is a browser. Even browsers that don't support WebAssembly can be used.
4. More secure because the app's .NET/C# code isn't served to clients.

=> Cons of Blazor Server
1. A full-blown ASP.NET Core server is required to host the application. Serverless deployment scenarios such as serving the app from a CDN aren't possible.
2. An active connection to the server is always required. This means there is a need to keep the server up and running 24X7. 
If the server is down, the application stops working.
3. As every user interaction involves a round trip to the server a higher latency usually exists when compared with Blazor WebAssembly hosting.
4. Scalability can be challenging especially for the apps that have many users as the server must manage multiple client connections and handle client state.
However, we can overcome this scalability issue, by using Azure SignalR Service with a Blazor Server app. 
This service allows a Blazor Server app to scale really well by supporting a large number of concurrent SignalR connections.

# Blazor project structure
=============================
Program.cs 
This file contains the Main() method which is the entry point for both the project types (i.e Blazor WebAssembly and Blazor Server). 

In a Blazor server project, the Main() method calls CreateHostBuilder() method which sets up the ASP.NET Core host. 

In a Blazor WebAssembly project, the App component, which is the root component of the application, is specified in the Main method. 
This root component is present in the root project folder in App.razor file.

Components are the building blocks of a Blazor application. 

wwwroot
For both the project types, this folder contains the static files like images, stylesheets etc.

App.razor
This is the root component of the application. It uses the built-in Router component and sets up client-side routing. 
It is this Router component that intercepts browser navigation and renders the page that matches the requested address. 
The Router uses the Found property to display the content when a match is found. 
If a match is not found, the NotFound property is used to display the  message - Sorry, there's nothing at this address.

Pages folder
This folder contains the _Host razor page and the routable components that make up the Blazor app. The components have the .razor extension.
Index component (Index.razor) – Rendered when we navigate to the root application URL.
Counter component (Counter.razor) – Rendered when we navigate to the path /counter.
FetchData component (FetchData.razor) – Rendered when we navigate to the path /fetchdata.
Error component (Error.razor) – Rendered when an unhandled exception occurs in the blazor app.

Shared folder
As the name implies, contains the shared components

MainLayout component (MainLayout.razor)
The application's main layout component

NavMenu component (NavMenu.razor)
Implements the navigation menu on the sidebar. 
NavLink component, renders navigation links to other Razor components like the index, counter and fetchdata components. 
This NavLink component is intelligent enough to highlight the navigation menu item, if it's component is currently displayed.

_Imports.razor
This is like the _ViewImports.cshtml file in an asp.net core MVC project. 
This file contains the common namespaces so we do not have to include them in every razor component.

wwwroot/index.html
This is the root page in a Blazor WebAssembly project and is implemented as an html page. 
When a first request hits the application, it is this page, that is initially served. 
It has the standard HTML, HEAD and BODY tags. It specifies where the root application component App.razor should be rendered. 
You can find this App.razor root component in the root project folder. It is included on the page as an HTML element <app>.

This index.html page also loads the blazor WebAssembly JavaScript file (_framework/blazor.webassembly.js). 
It is this file that is responsible for downloading:-

The compiled blazor application, it's dependencies and the .NET runtime
It also initializes the runtime to run the blazor app in the browser

Startup.cs
This file is present only in the Blazor Server project. As the name implies it contains the applications's startup logic. 
The Startup class contains the following two methods:

ConfigureServices - Configures the applications DI i.e dependency injection services. 
For example AddServerSideBlazor() method adds Blazor server side services.
On the IServiceCollection interface there are several methods that start with the word Add. 
These methods add different services for the Blazor application. We can even add our own services to the DI container.

Configure - Configures the app's request processing pipeline. 
Depending on what we want the Blazor application to be capable of doing we add or remove the respective middleware components from request processing pipeline. 
For example, UseStaticFiles() method adds the middleware component that can server static files like images, css etc.

Pages/_Host.cshtml
This is the root page of the application and is specified by calling MapFallbackToPage("/_Host") method. It is implemented as a razor page.

It is this page, that is initially served when a first request hits the application. 
It has the standard HTML, HEAD and BODY tags. 
It also specifies where the root application component, App component (App.razor) must be rendered. 
Finally, it also loads the blazor.server.js JavaScript file, which sets up the real-time SignalR connection between the server and the client browser. 
This connection is used to exchange information between the client and the server. SignalR, is a great framework for adding real-time web functionality to apps. 

Data folder (Blazor Server)
Contains code files related to the sample WeatherForecast service

appsettings.json (Blazor Server)
Just like an asp.net core mvc project, a blazor project also uses this file to store the Configuration settings.

# Blazor razor components
============================
The following is the Counter component that we get when we create a new Blazor project.
@page "/counter"
<h1>Counter</h1>
<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
@code 
{
    private int currentCount = 0;
    private void IncrementCount()
    {
        currentCount++;
    }
}

It is a combination of two things:
HTML markup which defines the user interface of the component i.e the look and feel.
C# code which defines the processing logic

When the application is compiled, the HTML and C# code converted into a component class. 
The name of the generated class matches the name of the component file.
A component file name must start with an uppercase character. 
If you add a component file that starts with a lower case character, the code will fail to compile and you get the following compiler error.

"Component names cannot start with a lowercase character"

# Split component HTML and C# code
====================================
In this example, both the HTML and C# are in a single file. This is fine for a simple component like this counter, but it is usually a good practice to separate HTML and C# code into their own files. It is not only good from maintenance standpoint, but it is also easy to unit test. 
There are 2 approaches, to split component HTML and C# code into their own separate files.
1. Partial files approach
2. Base class approach

=> Partial files approach
The HTML markup remains in Counter.razor file
// Counter.razor
@page "/counter"

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

Remember, when the component is compiled a class with the same name as the component file is generated. 
Create another class file with name Counter.razor.cs and include the following code in it. Notice the class in this file is implemented as a partial class.

// Counter.razor.cs
public partial class Counter
{
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}

=> Base class approach
Just like the partial class approach, even with the base class approach, the HTML markup remains in Counter.razor file.
Move the C# code to a separate class. I named it CounterBase. 
You can name the class anything you want, but it is a common convention to have the same name as the component but suffixed with the word Base. 

The access modifier must be at least protected if you wish to access the class member from the HTML.
// CounterBase.cs
public class CounterBase : ComponentBase
{
    protected int currentCount = 0;

    protected void IncrementCount()
    {
        currentCount++;
    }
}

Finally, in Counter.razor file do not forget to include the following inherits directive.
@inherits CounterBase

# EmployeeList Component
===========================
// EmployeeList.razor
@page "/"
@inherits EmployeeListBase

<h3>Employee List</h3>

<div class="card-deck">
    @foreach (var employee in Employees)
    {
    <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
        <div class="card-header">
            <h3>@employee.FirstName @employee.LastName</h3>
        </div>
        <img class="card-img-top imageThumbnail" src="@employee.PhotoPath" />
        <div class="card-footer text-center">
            <a href="#" class="btn btn-primary m-1">View</a>

            <a href="#" class="btn btn-primary m-1">Edit</a>

            <a href="#" class="btn btn-danger m-1">Delete</a>
        </div>
    </div>
    }
</div>

// EmployeeListBase.cs
using EmployeeManagement.Models;
using Microsoft.AspNetCore.Components;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EmployeeManagement.Web.Pages
{
    public class EmployeeListBase : ComponentBase
    {
        public IEnumerable<Employee> Employees { get; set; }

        protected override Task OnInitializedAsync()
        {
            LoadEmployees();
            return base.OnInitializedAsync();
        }

        private void LoadEmployees()
        {
            Employee e1 = new Employee
            {
                EmployeeId = 1,
                FirstName = "John",
                LastName = "Hastings",
                Email = "David@pragimtech.com",
                DateOfBrith = new DateTime(1980, 10, 5),
                Gender = Gender.Male,
                Department = new Department { DepartmentId = 1, DepartmentName = "IT" },
                PhotoPath = "images/john.png"
            };

            Employee e2 = new Employee
            {
                EmployeeId = 2,
                FirstName = "Sam",
                LastName = "Galloway",
                Email = "Sam@pragimtech.com",
                DateOfBrith = new DateTime(1981, 12, 22),
                Gender = Gender.Male,
                Department = new Department { DepartmentId = 2, DepartmentName = "HR" },
                PhotoPath = "images/sam.jpg"
            };

            Employee e3 = new Employee
            {
                EmployeeId = 3,
                FirstName = "Mary",
                LastName = "Smith",
                Email = "mary@pragimtech.com",
                DateOfBrith = new DateTime(1979, 11, 11),
                Gender = Gender.Female,
                Department = new Department { DepartmentId = 1, DepartmentName = "IT" },
                PhotoPath = "images/mary.png"
            };

            Employee e4 = new Employee
            {
                EmployeeId = 3,
                FirstName = "Sara",
                LastName = "Longway",
                Email = "sara@pragimtech.com",
                DateOfBrith = new DateTime(1982, 9, 23),
                Gender = Gender.Female,
                Department = new Department { DepartmentId = 3, DepartmentName = "Payroll" },
                PhotoPath = "images/sara.png"
            };

            Employees = new List<Employee> { e1, e2, e3, e4 };
        }
    }
}

Blazor components have several life cycle methods. 
OnInitializedAsync is the most common life cycle method. We are overriding this method to retrieve Employees data.

# Blazor Loading indicator
=============================
display a loading indicator, if there is a delay in retrieving the data a blazor component needs.

Employee List Component
A component like EmployeeList component retrieves data from a server asynchronously. 
Employees property in the base class holds the list of employees. 
We typically retrieve employees from a database by calling a server side service which is an asynchronous operation.
By the time the component is rendered, this asynchronous operation might not have completed.
This means Employees property could be null and can result in NullReference exceptions.

// EmployeeListBase.cs
public class EmployeeListBase : ComponentBase
{
    public IEnumerable<Employee> Employees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadEmployees);
    }

    private void LoadEmployees()
    {
        System.Threading.Thread.Sleep(2000);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }
}

While Employees property is null we see the loading spinner. 
As soon as the asynchronous operation is complete and Employees property is populated we see the list of Employees.

// EmployeeList.razor

@if (Employees == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="card-deck">
        @foreach (var employee in Employees)
        {
            <div class="card m-3">
                <div class="card-header">
                    <h3>@employee.FirstName @employee.LastName</h3>
                </div>
                <img class="card-img-top imageThumbnail" 
                     src="@employee.PhotoPath" />
            </div>
        }
    </div>
}

# Blazor data access strategies
===================================
to access server-side data from a Blazor application.

1. One way to build a data driven blazor application is by using the following architecture. 
With this architecture, the client which is usually the browser calls the Blazor server application. 
Blazor server application runs on the server. A SignalR connection is established between the client and the blazor application for exchanging information.

                Client<----->Blazor Server<------>DB
                
For data, the Blazor application can talk directly to a database server by using entity framework core or some other data access framework.
However, use this approach only when you know the Blazor application will always be running on the server and in the future there is no need to convert the Blazor server application to Blazor WebAssembly application.
This is because EF core cannot run on the client browser. 
So if you want to convert this Blazor server application to a Blazor WebAssembly application a lot of rework and code change is required.

2. With this architecture we have a RESTful service between the Blazor application and the Database.
REST stands for REpresentational State Transfer and it is based on open standards. 
So, Blazor application calls the RESTful service. The RESTful service calls the Database using Entity Framework Core.

                Client<----->Blazor Server<----->Restful service<------>DB
                
We will be building the RESTful service using ASP.NET Core MVC. 
Since the RESTful service will be running server-side on a .NET core enabled server
we will have access to all server-side resources and data including the capability to run Entity Framework Core code.

The obvious benefit of this approach is, the blazor code we write to consume a RESTful service can be used with both the hosting models 
i.e Blazor Server and Blazor WebAssembly. It is easy (ie. with minimal changes) we can convert a Blazor server project to Blazor WebAssembly project and vice-versa.

