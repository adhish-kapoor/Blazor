# REST Constraints
=====================
When building a REST API, we have to follow a set of rules. 
These are commonly called as REST Constraints. The following are some of the common REST constraints.

1. Client Server constraint
This is the first constraint. Client sends a request and the server sends a response.
In our case Client is the Employee portal which sends a request for employee data and the server, the REST API, responds with employee data.
This separation of concerns supports the independent evolution of the client-side logic and server-side logic.

2. Stateless constraint
The communication between the client and the server must be stateless between requests. 
This means we should not be storing anything on the server related to the client.
The request from the client should contain all the necessary information for the server to process that request. 
This ensures that each request can be treated independently by the server.

3. Cacheable constraint
Some data provided by the server like list of products, or list of departments in a company does not change that often. 
This constraint says that let the client know how long this data is good for, so that the client does not have to come back to the server for that data over and over again.

4. Uniform Interface
As the name implies, this constraint defines the interface between the client and the server. 
This constraint helps us understand how a REST API actually works. 

In the context of a REST API, a resource is a data entity like Product, Employee, Customer, Order etc. 
For example, a REST API that provides employee data makes the list of employees available at the following URI (Uniform Resource Identifier).

            http://xxx.com/api/employees
         
So, each resource, is identified by a specific URI. 
For example, the list of employees are available at the URI http://pragimtech.com/api/employees.
Similarly, the list of products are available at the URI http://pragimtech.com/api/products.

# PUT V/S PATCH
==================
PUT updates the entire object i.e FirstName, LastName, DOB, Gender, Email etc of an employee. 
Basically all the properties of the object are updated.

PATCH is used when you want to do a partial update i.e only a subset of the properties. 
May be just FirstName and Gender of an employee object.

# ASP.NET Core REST API DbContext
=======================================
EF core is lightweight, extensible, and open source software. Like .NET Core, EF Core is also cross platform. 
It works on windows, Mac OS, and Linux. EF core is Microsoftâ€™s official data access platform.

Entity Framework Core DbContext class
=======================================
One of the very important classes in Entity Framework Core is the DbContext class. This is the class that we use in our application code to interact with the underlying database. It is this class that manages the database connection and is used to retrieve and save data in the database.

To use the DbContext class in our application:
1.We create a class that derives from the DbContext class.
2.DbContext class is in Microsoft.EntityFrameworkCore namespace.

public class AppDbContext : DbContext
{ }

DbContextOptions in Entity Framework Core
===============================================
For the DbContext class to be able to do any useful work, it needs an instance of the DbContextOptions class.

The DbContextOptions instance carries configuration information such as the connection string, database provider to use etc.
We pass the DbContextOptions to the base DbContext class constructor using the base keyword as shown below:

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }
}

Entity Framework Core DbSet
==============================
1.The DbContext class includes a DbSet<TEntity> property for each entity in the model.
2.At the moment in our application we have, 2 entity classes - Employee and Department.
3.So in our AppDbContext class we have 2 corresponding DbSet properties.
DbSet<Employee>
DbSet<Department>

4.We will use these DbSet properties to query and save instances of Employee and Department classes.
5.The LINQ queries against the DbSet properties will be translated into queries against the underlying database.

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public DbSet<Employee> Employees { get; set; }
    public DbSet<Department> Employees { get; set; }
}

Seeding Data
================
Override OnModelCreating method to seed Employee and Department data.

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    base.OnModelCreating(modelBuilder);
    
    // Code to seed data
}

# Get list of resources using ASP.NET Core REST API
=====================================================
To create a REST API using ASP.NET core, create a controller class that derives from the built-in ControllerBase class. 
ControllerBase is in Microsoft.AspNetCore.Mvc namespace.

Controller vs ControllerBase in ASP.NET Core
If you are creating a REST API, make your Controller class derive from ControllerBase and not Controller class. 
Controller derives from ControllerBase and adds support for MVC views.

So create a controller that derives from Controller class if you are building an MVC web application. 
On the other hand, if you are creating a Web API, create a controller class that derives from ControllerBase class. 
So in short, Controller is for MVC web applications and ControllerBase is for MVC Web APIs.

ASP.NET Core API Controller Example
=======================================
1. EmployeesController is an API Controller so decorate it with [ApiController] attribute
2. As the name implies, [Route] attribute specifies the route. 
The word [controller] in square brackets specifies we just use the name of the Controller in the URL to get the EmployeesController.
3. IEmployeeRepository is injected into the Controller class using the standrad constructor injection. 
It is this IEmployeeRepository that retrieves employee data from the underlying SQL Server database. 
4. [HttpGet] attribute specifies that this method should respond to http GET request.
5. The return type of Task<ActionResult> allows us to return status code 200 OK along with the list of employees or status code 500 if there is a server error retrieving data from the database.

using EmployeeManagement.Api.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace EmployeeManagement.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeesController : ControllerBase
    {
        private readonly IEmployeeRepository employeeRepository;

        public EmployeesController(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        [HttpGet]
        public async Task<ActionResult> GetEmployees()
        {
            try
            {
                return Ok(await employeeRepository.GetEmployees());
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, 
					"Error retrieving data from the database");
            }
        }
    }
}

# ASP.NET Core REST API get by id
=====================================
A GET request to the URI /api/employees/1 should return the Employee whose ID is 1

using EmployeeManagement.Api.Models;
using EmployeeManagement.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeesController : ControllerBase
    {
        private readonly IEmployeeRepository employeeRepository;

        public EmployeesController(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Employee>>> GetEmployees()
        {
            try
            {
                return (await employeeRepository.GetEmployees()).ToList();
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpGet("{id:int}")]
        public async Task<ActionResult<Employee>> GetEmployee(int id)
        {
            try
            {
                var result = await employeeRepository.GetEmployee(id);

                if (result == null) return NotFound();

                return result;
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }
    }
}

# ASP.NET Core REST API Model Validation
===============================================
ASP.NET Core provides several built-in attributes for model validation. The following is the complete list.

Required - Specifies the field is required
Range - Specifies the minimum and maximum value allowed
MinLength - Specifies the minimum length of a string
MaxLength - Specifies the maximum length of a string
Compare - Compares 2 properties of a model. For example compare Email and ConfirmEmail properties
RegularExpression - Validates if the provided value matches the pattern specified by the regular expression

These validation attributes are in System.ComponentModel.DataAnnotations namespace. Also do not forget to install the following Nuget package.

Install-Package System.ComponentModel.Annotations

# Custom model validation errors in ASP.NET Core REST API
=============================================================
To add a custom model validation error, use AddModelError() method of the ModelState object.

[HttpPost]
public async Task<ActionResult<Employee>> CreateEmployee(Employee employee)
{
    try
    {
        if(employee == null)
        {
            return BadRequest();
        }

        // Add custom model validation error
        var emp = employeeRepository.GetEmployeeByEmail(employee.Email);

        if(emp != null)
        {
            ModelState.AddModelError("email", "Employee email already in use");
            return BadRequest(ModelState);
        }

        var createdEmployee = await employeeRepository.AddEmployee(employee);

        return CreatedAtAction(nameof(GetEmployee), new { id = createdEmployee.EmployeeId },
            createdEmployee);
    }
    catch (Exception)
    {
        return StatusCode(StatusCodes.Status500InternalServerError,
            "Error retrieving data from the database");
    }
}

# ASP.NET Core REST API and ModelState.IsValid check
========================================================
In an ASP.NET Core REST API, there is no need to explicitly check if the model state is Valid.
Since the controller class is decorated with the [ApiController] attribute, 
it takes care of checking if the model state is valid and automatically returns 400 response along the validation errors.

[Route("api/[controller]")]
[ApiController]
public class EmployeesController : ControllerBase
{
}

The following is the response we get when the model validation fails
{
    "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
    "title": "One or more validation errors occurred.",
    "status": 400,
    "traceId": "|65b7c07c-4323622998dd3b3a.",
    "errors": {
        "Email": [
            "The Email field is required."
        ],
        "FirstName": [
            "The field FirstName must be a string with a minimum length of 2 and a maximum length of 100."
        ]
    }
}

